#include <stdio.h>
#include <stdlib.h>
#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include "bitmanip.h"

main (int argc, char *argv[])
{
	Display				*Monitor;
	Window				ImageWindow;
	GC					ImageGC;
	XWindowAttributes	Atts;
	XImage				*Picture;
	int					ROWS,COLS;
	unsigned char		*displaydata;
	
	FILE				*fpt;
	unsigned char		*filedata;
	char				header[80];
	int					i,j,BYTES;
	
	/* tell user how to use program if incorrect arguments */
	if (argc != 2)
	{
		printf("Usage: lab1x [filename]\n");
		exit(0);
	}
	
	/* open image for reading */
	fpt = fopen(argv[1],"rb");
	if (fpt == NULL)
	{
		printf("Unable to open %s for reading\n", argv[1]);
		exit(0);
	}
	
	/* read image header to determine if ppm is greyscale or RGB */
	i = fscanf(fpt,"%s %d %d %d ", header,&COLS,&ROWS,&BYTES);
	// Making sure we get the right PPM information
	if (i != 4 || (strcmp(header,"P5") !=0 && strcmp(header,"P6") !=0)
	 || BYTES != 255)
	{
		printf("%s is not an PPM image\n", argv[1]);
		fclose(fpt);
		exit(0);
	}
	
	/* allocate dynamic memory for displaydata[2] */
	displaydata = (unsigned char *)calloc(ROWS*COLS*2,sizeof(unsigned char));
	if (displaydata == NULL)
	{
		printf("DISPLAYDATA: Unable to allocate %d x %d memory\n",COLS,ROWS);
		exit(0);
	}

	/*	determine if PPM is greyscale(P5) or RGB(P6) to decide how to handle 
		displaydata */
		
	/* First Case: Greyscale image - only requires 8-bits*/
	if (strcmp(header,"P5") == 0)
	{
		printf("%s is a greyscale %d x %d PPM image\n",argv[1],COLS,ROWS);
		// allocate dynamic memory for filedata[0]
		filedata = (unsigned char *)calloc(ROWS*COLS*1,sizeof(unsigned char));
		if (filedata == NULL)
		{
			printf("FILEDATA: Unable to allocate %d x %d memory\n",COLS,ROWS);
			exit(0);
		}
		
		// read image data from file 
		fread(filedata,1,ROWS*COLS*1,fpt);
		fclose(fpt);
		
		// bit manipulation to do filedata[0] -> displaydata[2]
		bmGSX(filedata,displaydata,ROWS,COLS);	
	}
	
	/* Second Case: RGB image - requires 24-bits*/
	if (strcmp(header,"P6") == 0)
	{
		printf("%s is a RGB %d x %d PPM image\n",argv[1],COLS,ROWS);
		// allocate dynamic memory for filedata[0]
		filedata = (unsigned char *)calloc(ROWS*COLS*3,sizeof(unsigned char));
		if (filedata == NULL)
		{
			printf("FILEDATA: Unable to allocate %d x %d memory\n",COLS,ROWS);
			exit(0);
		}
		
		// read image data from file 
		fread(filedata,1,ROWS*COLS*3,fpt);
		fclose(fpt);
		
		// bit manipulation to do filedata[0] -> displaydata[2]
		bmRGBX(filedata,displaydata,ROWS,COLS);	
	}
	

	
	// don't forget to free up the allocated memory
	free(filedata);
	free(displaydata);
}
