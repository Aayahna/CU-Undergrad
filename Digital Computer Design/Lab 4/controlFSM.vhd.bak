LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY controlFSM IS
	GENERIC (N:	INTEGER := 16);
	PORT(	clk, resetn, run	:	IN STD_LOGIC;
			din					:	IN STD_LOGIC_VECTOR (N-1 DOWNTO 0);
			IR						:	IN STD_LOGIC_VECTOR (7 DOWNTO 0);
			IRin					:	IN STD_LOGIC;
			done					:	OUT STD_LOGIC;
			regin					:	OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
			Gin					:	OUT STD_LOGIC;
			Ain					:	OUT STD_LOGIC;
			addsub				:	OUT STD_LOGIC;
			muxout				:	OUT STD_LOGIC_VECTOR	(9 DOWNTO 0)
	);
END controlFSM;


ARCHITECTURE mixed OF controlFSM IS
-- Specifying the MEALY state machine and its signals
TYPE fsm_state IS (T0, T1, T2, T3);
SIGNAL y: fsm_state;

SIGNAL mux_x, mux_y: STD_LOGIC_VECTOR (7 DOWNTO 0);

BEGIN
	-- Assignments for the the Registers X and Y
	-- Converting the instruction's registers so the multiplexer can read them
	x_mux: PROCESS(IR)
	BEGIN
		CASE IR(3 DOWNTO 5) IS
			WHEN "000" => mux_x <= "00000001";
			WHEN "001" => mux_x <= "00000010";
			WHEN "010" => mux_x <= "00000100";
			WHEN "011" => mux_x <= "00001000";
			WHEN "100" => mux_x <= "00010000";
			WHEN "101" => mux_x <= "00100000";
			WHEN "110" => mux_x <= "01000000";
			WHEN "111" => mux_x <= "10000000";
			WHEN OTHERS => mux_x <= "00000000";
		END CASE;
	END PROCESS x_mux;
	
	y_mux: PROCESS(IR)
	BEGIN
		CASE IR(2 DOWNTO 0) IS
			WHEN "000" => mux_y <= "00000001";
			WHEN "001" => mux_y <= "00000010";
			WHEN "010" => mux_y <= "00000100";
			WHEN "011" => mux_y <= "00001000";
			WHEN "100" => mux_y <= "00010000";
			WHEN "101" => mux_y <= "00100000";
			WHEN "110" => mux_y <= "01000000";
			WHEN "111" => mux_y <= "10000000";
			WHEN OTHERS => mux_y <= "00000000";
		END CASE;
	END PROCESS y_mux;

	-- State assignments and output assignments made
	PROCESS(resetn, clk)
	BEGIN
		IF resetn='0' THEN
			y <= T0;
		ELSIF RISING_EDGE(clk) THEN
			CASE y IS
				WHEN T0 =>
					IRin <= '1';
					IR <= din(7 DOWNTO 0);
					y <= T1;
			
				IF run='1' THEN
					WHEN T1 =>
						IF IR(7 DOWNTO 6) = "00" THEN
							muxout <= mux_y;
							muxout(9 DOWNTO 8) <= (OTHERS => '0');
							regin <= mux_x;
							y <= T0;
							
						ELSIF IR(7 DOWNTO 6) = "01" THEN
							muxout <= "0100000000";
							regin <= mux_x;
							y <= T0;
							
						ELSIF IR(7 DOWNTO 6) = "10" THEN
							muxout <= mux_x;
							muxout(9 DOWNTO 8) <= (OTHERS => '0');
							Ain <= '1';
							y <= T2;
							
						ELSIF IR(7 DOWNTO 6) = "11" THEN
							muxout <= mux_x;
							muxout(9 DOWNTO 8) <= (OTHERS => '0');
							Ain <= '1';
							y <= T2;
						END IF;
					
					WHEN T2 =>
						IF IR(7 DOWNTO 6) = "10" THEN
							muxout <= mux_y;
							Gin <= '1';
							addsub <= '0';
							y <= T3;
							
						ELSIF IR(7 DOWNTO 6) = "11" THEN
							muxout <= mux_y;
							Gin <= '1';
							addsub <= '1';
							y <= T3;
						END IF;
						
					WHEN T3 =>
						IF IR(7 DOWNTO 6) = "10" THEN
							muxout <= "1000000000";
							regin <= mux_x;
							y <= T0;
							
						ELSIF IR(7 DOWNTO 6) = "11" THEN
							muxout <= "1000000000";
							regin <= mux_x;
							y <= T0;
						END IF;
				END IF;
			END CASE;
		END IF;
	END PROCESS;
END mixed;
