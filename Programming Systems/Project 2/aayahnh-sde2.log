---------------------------------*3.1 distanceR2*-------------------------------

# let v1 = [2.;4.;6.;8.];;
val v1 : float list = [2.; 4.; 6.; 8.]
# let v2 = [1.;3.;5.;7.];;
val v2 : float list = [1.; 3.; 5.; 7.]
# let v3 = [3.;6.;9.;12.];;
val v3 : float list = [3.; 6.; 9.; 12.]
# distanceR2(v1,v2);;
- : float = 4.
# distanceR2(v2,v3);;
- : float = 54.

----------------------------*3.2 distanceSqAllMeans*----------------------------

# let v = [25.921; 15.716];;
val v : float list = [25.921; 15.716]
# let vset = [[32.994; 58.539]; [69.602; 14.568]; [75.248; 24.346]; [45.683; 34.467]; [30.546; 1.634]];;
val vset : float list list =
  [[32.994; 58.539]; [69.602; 14.568]; [75.248; 24.346]; [45.683; 34.467];
   [30.546; 1.634]]
# let v1 = [7.356; 13.345];;
val v1 : float list = [7.356; 13.345]
# distanceSqAllMeans(v, vset);;
- : float list =
[1883.836658; 1909.34766500000046; 2507.62982900000043; 742.13664499999993;
 219.693348999999984]
# distanceSqAllMeans(v1, vset);;
- : float list =
[2699.80468; 3876.06024500000058; 4730.34566500000165; 1915.09781299999986;
 674.923620999999912]

---------------------------------*3.3 listMinPos*-------------------------------

# let alist = [49.991; 46.35; 47.0; 35.01; 35.011; 13.0];; 
val alist : float list = [49.991; 46.35; 47.; 35.01; 35.011; 13.]
# let alist1 = [3; 57; 94; -1];;                           
val alist1 : int list = [3; 57; 94; -1]
# listMinPos(alist);;
- : int = 5
# listMinPos(alist1);;
- : int = 3

-----------------------------------*3.4 elsum*----------------------------------

# let l1 = [4.;8.;12.;16.];;
val l1 : float list = [4.; 8.; 12.; 16.]
# let l2 = [3.; 6.; 9.; 12.];;
val l2 : float list = [3.; 6.; 9.; 12.]
# let l3 = [5.; 10.; 15.; 20.];;
val l3 : float list = [5.; 10.; 15.; 20.]
# elsum(l1,l2);;
- : float list = [7.; 14.; 21.; 28.]
# elsum(l2,l3);;
- : float list = [8.; 16.; 24.; 32.]

--------------------------------*3.5 scaleList*---------------------------------

# let l1 = [6.; 12.; 18.; 24.];;
val l1 : float list = [6.; 12.; 18.; 24.]
# let l2 = [8.; 16.; 24.; 32.];;
val l2 : float list = [8.; 16.; 24.; 32.]
# let scale = 4;;
val scale : int = 4
# scaleList(l1,scale);;
- : float list = [1.5; 3.; 4.5; 6.]
# scaleList(l2,scale);;
- : float list = [2.; 4.; 6.; 8.]

---------------------------------*3.6 zeroes*-----------------------------------

# zeroes(7);;          
- : float list = [0.; 0.; 0.; 0.; 0.; 0.; 0.]
# zeroes(11);;
- : float list = [0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.]

------------------------------*3.7 zeroMeansSet*--------------------------------

# zeroMeansSet(2,7);;
- : float list list =
[[0.; 0.; 0.; 0.; 0.; 0.; 0.]; [0.; 0.; 0.; 0.; 0.; 0.; 0.]]
# zeroMeansSet(7,2);;
- : float list list =
[[0.; 0.]; [0.; 0.]; [0.; 0.]; [0.; 0.]; [0.; 0.]; [0.; 0.]; [0.; 0.]]

-------------------------------*3.8 zeroVdiff*----------------------------------

# let v1 = [5; 4; 3; 2; 1];;
val v1 : int list = [5; 4; 3; 2; 1]
# let v2 = [5; 4; 3; 2; 1];;
val v2 : int list = [5; 4; 3; 2; 1]
# let v3 = [5; 4; 3; 2; 0];;     
val v3 : int list = [5; 4; 3; 2; 0]
# zeroVdiff(v1,v2);;
- : bool = true
# zeroVdiff(v1,v3);;        
- : bool = false

------------------------------*3.9 zeroSetDiff*---------------------------------

# let s1 = [[8; 9; 10]; [13; 14; 15]];;
val s1 : int list list = [[8; 9; 10]; [13; 14; 15]]
# let s2 = [[8; 9; 10]; [13; 14; 15]];;
val s2 : int list list = [[8; 9; 10]; [13; 14; 15]]
# let s3 = [[8; 9; 0]; [13; 14; 15]];;
val s3 : int list list = [[8; 9; 0]; [13; 14; 15]]
# zeroSetDiff(s1,s2);;
- : bool = true
# zeroSetDiff(s1,s3);;
- : bool = false

------------------------------*3.10 zeroCounts*---------------------------------

# zeroCounts(9);;
- : int list = [0; 0; 0; 0; 0; 0; 0; 0; 0]
# zeroCounts(2);;
- : int list = [0; 0]

-----------------------------*3.11 updateCounts*--------------------------------

# let v1 = [1; 3; 5; 7];;
val v1 : int list = [1; 3; 5; 7]
# let v2 = zeroCounts(8);;
val v2 : int list = [0; 0; 0; 0; 0; 0; 0; 0]
# updateCounts(3,v1);;
- : int list = [1; 3; 5; 8]
# updateCounts(2,v2);;
- : int list = [0; 0; 1; 0; 0; 0; 0; 0]

-----------------------------*4.1 updateMeansSum*-------------------------------

# let s1 = [[8.; 9.; 10.]; [13.; 14.; 15.]];;
val s1 : float list list = [[8.; 9.; 10.]; [13.; 14.; 15.]]
# let v1 = [2.; 3.; 4.];;
val v1 : float list = [2.; 3.; 4.]
# let v2 = [5.; 7.; 9.];;
val v2 : float list = [5.; 7.; 9.]
# updateMeansSum(v1,1,s1);;
- : float list list = [[8.; 9.; 10.]; [15.; 17.; 19.]]
# updateMeansSum(v2,0,s1);;
- : float list list = [[13.; 16.; 19.]; [13.; 14.; 15.]]

------------------------------*4.2 formNewMeans*--------------------------------

# let newmeanssum1 = [[55.23; 75.]; [92.59]];;  
val newmeanssum1 : float list list = [[55.23; 75.]; [92.59]]
# let newcounts = [5; 8];;                      
val newcounts : int list = [5; 8]
# let newmeanssum2 = [[103.49]; [23.71]];;    
val newmeanssum2 : float list list = [[103.49]; [23.71]]
# formNewMeans(newmeanssum1,newcounts);;      
- : float list list = [[11.046; 15.]; [11.57375]]
# formNewMeans(newmeanssum2,newcounts);;      
- : float list list = [[20.698]; [2.96375]]

-------------------------------*4.3 reclassify*---------------------------------

# #use "myinputs.caml";;
val h : float list list =
  [[46.356342; 62.448746]; [-64.65906; -32.147893]; [23.13465; 59.63509];
   [-45.443999; -50.46789]; [54.426897; 42.356]; [-76.765456; -54.986321];
   [29.325456; 58.986799]; [-40.659533; -73.362999]; [37.247; 56.307999];
   [-56.567873; -68.974009]; [42.306; 76.344002]; [-36.535247; -62.980076];
   [35.416; 78.914001]; [-58.355687; -59.075224]; [73.311001; 31.091];
   [-48.674655; -48.5642365]; [65.199001; 73.499001];
   [-44.542244; -45.785778]; [65.061001; 75.375]; [-41.876355; -61.986647];
   [38.756538; 70.296997]; [-43.792999; -38.132]; [45.425998; 54.402];
   [-52.188; -26.980061]; [52.100872; 74.167]; [-23.636002; -48.000605];
   [45.1356; 40.932999]; [-54.687; -62.908652]; [47.235099; 64.527];
   [-66.400002; -56.000623]; [34.100998; 83.139999]; [-64.271; -59.99991];
   [30.365999; 34.556999]; [-44.353001; -35.251999]; [61.408001; 49.321999];
   [-54.328999; -57.067001]; [44.124001; 53.855999]; [-39.362999; -55.049];
   [57.736; 69.579002]; [-44.056; -58.951]; [48.907001; 37.827];
   [-55.932999; -51.294998]; [40.303001; 55.118]; [-59.976002; -34.715];
   [41.105; 45.528]; [-51.560001; -51.320999]; [55.479; 47.98];
   [-24.08; -71.802002]; [47.221001; 52.074001]; [-42.977001; -48.509998];
   [63.467999; 57.388]; [-60.029999; -14.814]; [38.102001; 45.949001];
   [-47.402; -50.949001]; [47.681999; 52.648998]; [-59.631001; -35.384998];
   [48.504002; 33.852001]; [-53.819; -42.988998]; [52.645; 58.112];
   [-44.653999; -59.618999]; [45.764; 67.897003]; [-53.721001; -41.657001];
   [58.09; 32.983002]; [-62.123001; -65.014999]; [51.075001; 61.535999];
   [-56.089001; -64.358002]; [56.133999; 55.541]; [-46.181; -58.021999];
   [55.351002; 45.152]; [-48.125; -51.327]; [74.464996; 53.213001];
   [-47.492001; -55.717999]; [55.716; 46.556999]; [-47.737999; -67.221001];
   [44.997002; 41.153]; [-61.254002; -64.741997]; [42.384998; 54.869999];
   [-48.435001; -54.327]; [68.799004; 44.391998]; [-68.746002; -55.521999];
   [52.942001; 58.719002]; [-43.428001; -57.543999]; [54.335999; 54.074001];
   [-69.303001; -46.254002]; [61.57; 58.123001]; [-34.673; -46.290001];
   [35.868; 45.924999]; [-44.497002; -50.451]; [60.716999; 52.956001];
   [-43.514999; -55.981998]; [78.072998; 44.035999]; [-63.451; -36.287998];
   [50.001999; 57.727001]; [-51.501999; -47.257999]; [57.654999; 45.285];
   [-65.967003; -76.841003]; [61.748001; 51.773998]; [-61.874001; -62.702];
   [53.289001; 53.289001]; [-57.244999; ...]; ...]
# let muzero = [[-47.354224; -35.344530]; [-63.643990; -54.354022]];;
val muzero : float list list =
  [[-47.354224; -35.34453]; [-63.64399; -54.354022]]
# let mu1 = reclassify(h,muzero,zeroMeansSet(2,2),zeroCounts(2));;
val mu1 : float list list =
  [[20.7746034685314811; 23.7944707167832199];
   [-52.3740743508771658; -59.8672731578947364]]
# let mu2 = reclassify(h,mu1,zeroMeansSet(2,2),zeroCounts(2));;
val mu2 : float list list =
  [[50.3914524999999927; 51.911898];
   [-50.5369919199999913; -52.0101505749999902]]
   
-----------------------------------*4.4 cmeans*---------------------------------

# h;;
- : float list list =
[[46.356342; 62.448746]; [-64.65906; -32.147893]; [23.13465; 59.63509];
 [-45.443999; -50.46789]; [54.426897; 42.356]; [-76.765456; -54.986321];
 [29.325456; 58.986799]; [-40.659533; -73.362999]; [37.247; 56.307999];
 [-56.567873; -68.974009]; [42.306; 76.344002]; [-36.535247; -62.980076];
 [35.416; 78.914001]; [-58.355687; -59.075224]; [73.311001; 31.091];
 [-48.674655; -48.5642365]; [65.199001; 73.499001]; [-44.542244; -45.785778];
 [65.061001; 75.375]; [-41.876355; -61.986647]; [38.756538; 70.296997];
 [-43.792999; -38.132]; [45.425998; 54.402]; [-52.188; -26.980061];
 [52.100872; 74.167]; [-23.636002; -48.000605]; [45.1356; 40.932999];
 [-54.687; -62.908652]; [47.235099; 64.527]; [-66.400002; -56.000623];
 [34.100998; 83.139999]; [-64.271; -59.99991]; [30.365999; 34.556999];
 [-44.353001; -35.251999]; [61.408001; 49.321999]; [-54.328999; -57.067001];
 [44.124001; 53.855999]; [-39.362999; -55.049]; [57.736; 69.579002];
 [-44.056; -58.951]; [48.907001; 37.827]; [-55.932999; -51.294998];
 [40.303001; 55.118]; [-59.976002; -34.715]; [41.105; 45.528];
 [-51.560001; -51.320999]; [55.479; 47.98]; [-24.08; -71.802002];
 [47.221001; 52.074001]; [-42.977001; -48.509998]; [63.467999; 57.388];
 [-60.029999; -14.814]; [38.102001; 45.949001]; [-47.402; -50.949001];
 [47.681999; 52.648998]; [-59.631001; -35.384998]; [48.504002; 33.852001];
 [-53.819; -42.988998]; [52.645; 58.112]; [-44.653999; -59.618999];
 [45.764; 67.897003]; [-53.721001; -41.657001]; [58.09; 32.983002];
 [-62.123001; -65.014999]; [51.075001; 61.535999]; [-56.089001; -64.358002];
 [56.133999; 55.541]; [-46.181; -58.021999]; [55.351002; 45.152];
 [-48.125; -51.327]; [74.464996; 53.213001]; [-47.492001; -55.717999];
 [55.716; 46.556999]; [-47.737999; -67.221001]; [44.997002; 41.153];
 [-61.254002; -64.741997]; [42.384998; 54.869999]; [-48.435001; -54.327];
 [68.799004; 44.391998]; [-68.746002; -55.521999]; [52.942001; 58.719002];
 [-43.428001; -57.543999]; [54.335999; 54.074001]; [-69.303001; -46.254002];
 [61.57; 58.123001]; [-34.673; -46.290001]; [35.868; 45.924999];
 [-44.497002; -50.451]; [60.716999; 52.956001]; [-43.514999; -55.981998];
 [78.072998; 44.035999]; [-63.451; -36.287998]; [50.001999; 57.727001];
 [-51.501999; -47.257999]; [57.654999; 45.285]; [-65.967003; -76.841003];
 [61.748001; 51.773998]; [-61.874001; -62.702]; [53.289001; 53.289001];
 [-57.244999; ...]; ...]
# let mucurrent1 = [[-57.243999; -35.358922]; [-68.245233; -55.358299]];;
val mucurrent1 : float list list =
  [[-57.243999; -35.358922]; [-68.245233; -55.358299]]
# let mucurrent2 = [[-52.364099; -59.009424]; [-51.100353; -45.259200]];;
val mucurrent2 : float list list =
  [[-52.364099; -59.009424]; [-51.100353; -45.2592]]
# let mucurrent3 = [[-47.993432; -54.463254]; [-34.536886; -56.346754]];;
val mucurrent3 : float list list =
  [[-47.993432; -54.463254]; [-34.536886; -56.346754]]
# let mucurrent4 = [[-45.335999; -54.354321]; [-35.467886; -76.455335]];;
val mucurrent4 : float list list =
  [[-45.335999; -54.354321]; [-35.467886; -76.455335]]
# let mucurrent5 = [[-58.990332; -58.883853]; [-34.684632; -54.364299]];;
val mucurrent5 : float list list =
  [[-58.990332; -58.883853]; [-34.684632; -54.364299]]
# cmeans(2,h,mucurrent1);;
- : float list list =
[[50.3914524999999927; 51.911898];
 [-50.5369919199999913; -52.0101505749999902]]
# cmeans(2,h,mucurrent2);;
- : float list list =
[[-50.5369919199999913; -52.0101505749999902];
 [50.3914524999999927; 51.911898]]
# cmeans(2,h,mucurrent3);;
- : float list list =
[[-50.5369919199999913; -52.0101505749999902];
 [50.3914524999999927; 51.911898]]
# cmeans(2,h,mucurrent4);;
- : float list list =
[[50.3914524999999927; 51.911898];
 [-50.5369919199999913; -52.0101505749999902]]
# cmeans(2,h,mucurrent5);;
- : float list list =
[[-50.5369919199999913; -52.0101505749999902];
 [50.3914524999999927; 51.911898]]

--------------------------------------------------------------------------------
